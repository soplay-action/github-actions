name: cicd-5
on:
  push:
    paths:
      - 'my-app/**'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    types: [opened, synchronize, closed]
    branches: [dev, master]
    paths:
      - 'my-app/**'

env:
  actions-module-repo: 'soplay-action/github-actions-module'

jobs:
  test:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cehckout actions module
        uses: actions/checkout@v4
        with:
          repository: ${{ env.actions-module-repo}}
          path: ./actions-module
          ref: ${{ vars.VERSION }}
      - name: use test module
        uses: ./actions-module/common/test/react/bun
        with:
          WORKDIR: 'my-app'

  set-environment:
    if: github.event.pull_request.merged == true || github.ref_type == 'tag'
    runs-on: ubuntu-latest
    outputs:
      environment: '${{ steps.set-env.outputs.environment }}'
    steps:
      - name: Cehckout actions module
        uses: actions/checkout@v4
        with:
          repository: ${{ env.actions-module-repo}}
          path: ./actions-module
          ref: ${{ vars.VERSION }}
      - name: use set-environment module
        uses: ./actions-module/common/set-environment
        id: set-env
        with:
          REF_TYPE: ${{ github.ref_type }}
          BASE_REF: ${{ github.base_ref }}

  image-build:
    runs-on: ubuntu-latest
    needs: [set-environment]
    strategy:
      matrix:
        environment: ['${{ needs.set-environment.outputs.environment }}']
    environment: ${{ matrix.environment }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Cehckout actions module
        uses: actions/checkout@v4
        with:
          repository: ${{ env.actions-module-repo}}
          path: ./actions-module
          ref: ${{ vars.VERSION }}
      - name: use image-build-push module
        uses: ./actions-module/common/image-build-push
        with:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
          REPOSITORY: ${{ vars.REPOSITORY }}
          REGISTY: ${{ secrets.REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [set-environment, image-build]
    strategy:
      matrix:
        environment: ['${{ needs.set-environment.outputs.environment }}']
    environment: ${{matrix.environment}}
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - name: Cehckout actions module
        uses: actions/checkout@v4
        with:
          repository: ${{ env.actions-module-repo}}
          path: ./actions-module
          ref: ${{ vars.VERSION }}
      - name: use deploy-k8s-helm module
        uses: ./actions-module/common/deploy/k8s/helm
        id: status
        with:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          RELEASE_NAME: my-app
          HELM_CHART_PATH: kubernetes/my-app
          NAMESPACE: my-app-${{ vars.SUFFIX }}
          REPOSITORY: ${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
      - name: use webhook-discord notify module
        if: always()
        uses: ./actions-module/common/webhook/discord
        with:
          DEPLOY_STEP_STATUS: ${{ steps.status.outcome }}
          ENVIRONMENT: ${{ matrix.environment }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}

  create-pr:
    if: needs.set-environment.outputs.environment == 'qa'
    runs-on: ubuntu-latest
    needs: [set-environment, deploy]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: Cehckout actions module
        uses: actions/checkout@v4
        with:
          repository: ${{ env.actions-module-repo}}
          path: ./actions-module
          ref: ${{ vars.VERSION }}
      - name: uses create-pr module
        uses: ./actions-module/common/create-pr
        with:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          HEAD: release/${{ github.ref_name }}
          BASE: master

  approve:
    if: needs.set-environment.outputs.environment == 'staging'
    runs-on: ubuntu-latest
    environment: approve-process # environment pretection roll 을 사용해서 승인 로직 추가
    needs: [set-environment, deploy]
    steps:
      - name: approve
        run: |
          echo "Approve Done"

  prod-deploy:
    runs-on: ubuntu-latest
    needs: [approve]
    strategy:
      matrix:
        environment: ['prod']
    environment: ${{matrix.environment}}
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - name: Cehckout actions module
        uses: actions/checkout@v4
        with:
          repository: ${{ env.actions-module-repo}}
          path: ./actions-module
          ref: ${{ vars.VERSION }}
      - name: use deploy-k8s-helm module
        uses: ./actions-module/common/deploy/k8s/helm
        id: status
        with:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
          RELEASE_NAME: my-app
          HELM_CHART_PATH: kubernetes/my-app
          NAMESPACE: my-app-${{ vars.SUFFIX }}
          REPOSITORY: ${{ secrets.REGISTRY }}/${{ vars.REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
      - name: use webhook-discord notify module
        if: always()
        uses: ./actions-module/common/webhook/discord
        with:
          DEPLOY_STEP_STATUS: ${{ steps.status.outcome }}
          ENVIRONMENT: ${{ matrix.environment }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
