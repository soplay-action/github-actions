name: cicd-1
on:
  pull_request:
    types: [opened, synchronize, closed]
    branches: [dev]
    paths:
      - 'my-app/**'

env:
  react-dir: my-app

jobs:
  test:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: setup-bun
        uses: oven-sh/setup-bun@v1
      - name: Cache
        uses: actions/cache@v3
        with:
          key: ${{runner.os}}-bun-${{hashFiles('**/bun.lockb')}}
          restore-keys: ${{runner.os}}-bun-
          path: |
            ~/.bun
            **/node_modules
      - name: install deps
        run: bun i
        working-directory: ${{env.react-dir}}
      - name: run test
        run: bun run test
        working-directory: ${{env.react-dir}}
      - name: build test
        run: bun run build
        working-directory: ${{env.react-dir}}

  image-build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    # permissions: # aws actions 사용시 필요
    # id-token: write
    # contents: read
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: registry login
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_ACCESS_TOKEN}}
      - name: build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{secrets.DOCKER_USERNAME}}/${{vars.REPOSITORY}}:${{github.sha}}
          platforms: |
            linux/amd64
            linux/arm64
            linux/arm/v7
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: image-build
    strategy:
      matrix:
        environment: ['dev-release']
    environment: ${{matrix.environment}}
    steps:
      - name: setup kubectle
        uses: azure/setup-kubectl@v3
      - name: setup helm
        uses: azure/setup-helm@v3
      - name: setup kubeconfig
        run: |
          echo "${{secrets.KUBE_CONFIG_DATA}}" > ~/.kube/config
      - name: deploy
        id: status
        run: |
          helm upgrade --install my-app kubernetes/my-app --create-namespace --namespace my-app-${{ vars.SUFFIX }}  \
          --set image.tag=${{ github.sha }} \
          --set image.repository=${{ secrets.DOCKER_USERNAME }}/${{ vars.REPOSITORY }}
      - name: notify
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.WEBHOOK_URL }}
          title: '${{ vars.SUFFIX }} 환경 배포'
          description: |
            ENVIRONMENT : `${{ vars.SUFFIX }}`
            Deploy Result : `${{ steps.status.outcome }}`
            REPO : `${{ github.repository }}`
            PR : `${{ github.event.pull_request.html_url }}`
            SHA : `${{ github.event.pull_request.head.sha }}`
            IMAGE : `${{ secrets.DOCKER_USERNAME }}/${{ vars.REPOSITORY }}:${{ github.sha }}`
